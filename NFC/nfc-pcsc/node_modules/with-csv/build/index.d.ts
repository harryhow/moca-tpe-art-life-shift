/// <reference types="node" />
import csv from 'csv-parser';
declare type ArrayMethod<T, U> = (value: T, index?: number) => U | Promise<U>;
declare type CsvRowsCollection<T> = {
    /**
     * Chainable methods
     */
    uniq(cb: ArrayMethod<T, string>): CsvRowsCollection<T>;
    filter(cb: ArrayMethod<T, boolean>): CsvRowsCollection<T>;
    map<U>(cb: ArrayMethod<T, U>): CsvRowsCollection<U>;
    forEach(cb: ArrayMethod<T, void>): CsvRowsCollection<T>;
    /**
     * Terminator methods
     */
    find: (cb: ArrayMethod<T, boolean>) => Promise<T | null>;
    every: (cb: ArrayMethod<T, boolean>) => Promise<boolean>;
    some: (cb: ArrayMethod<T, boolean>) => Promise<boolean>;
    includes: (value: T) => Promise<boolean>;
    toArray: () => Promise<T[]>;
    toJSON: (space?: string | number) => Promise<string>;
    process: () => Promise<void>;
};
export declare function withCSV(csvFileOrBuffer: string | Buffer, options?: csv.Options | readonly string[]): {
    get<T extends string>(columns?: T[] | undefined): Promise<Record<T, string>[]>;
    query<T_1 extends string>(columns?: T_1[] | undefined): CsvRowsCollection<Record<T_1, string>>;
};
export {};
